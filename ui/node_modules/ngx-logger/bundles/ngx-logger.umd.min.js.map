{
  "version": 3,
  "file": "ngx-logger.umd.min.js",
  "sources": [
    "ng://ngx-logger/node_modules/tslib/tslib.es6.js",
    "ng://ngx-logger/out/lib/http.service.ts",
    "ng://ngx-logger/out/lib/logger.config.ts",
    "ng://ngx-logger/out/lib/config.engine.ts",
    "ng://ngx-logger/out/lib/utils/logger.utils.ts",
    "ng://ngx-logger/out/lib/logger.service.ts",
    "ng://ngx-logger/out/lib/custom-logger.service.ts",
    "ng://ngx-logger/out/lib/types/http-meta-data.interface.ts",
    "ng://ngx-logger/out/lib/logger.module.ts",
    "ng://ngx-logger/out/lib/testing/logger.service.mock.ts",
    "ng://ngx-logger/out/lib/testing/custom-logger.service.mock.ts",
    "ng://ngx-logger/out/lib/testing/http.service.mock.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {HttpMetaDataInterface} from './types/http-meta-data.interface';\n\n\n@Injectable()\nexport class NGXLoggerHttpService {\n  constructor(private readonly http: HttpClient) {\n\n  }\n\n  logOnServer(url: string, message: string, additional: any[], metaData: HttpMetaDataInterface): Observable<any> {\n    const body = {\n      message: message,\n      additional: additional,\n      level: metaData.level,\n      timestamp: metaData.timestamp,\n      fileName: metaData.fileName,\n      lineNumber: metaData.lineNumber\n    };\n\n    const options = {\n      headers: new HttpHeaders().set('Content-Type', 'application/json')\n    };\n\n    return this.http.post(url, body, options)\n  }\n}\n",
    "import {NgxLoggerLevel} from './types/logger-level.enum';\n\nexport class LoggerConfig {\n  level: NgxLoggerLevel;\n  serverLogLevel?: NgxLoggerLevel;\n  serverLoggingUrl?: string;\n}\n",
    "import {LoggerConfig} from './logger.config';\n\nexport class NGXLoggerConfigEngine {\n\n  private _config;\n  constructor(readonly config: LoggerConfig) {\n    this._config = config;\n  }\n\n  updateConfig(config: LoggerConfig) {\n    this._config = this._clone(config);\n  }\n\n  getConfig() {\n    return this._clone(this._config);\n  }\n\n\n  // TODO: add tests around cloning the config. updating an object passed into the config (or retrieving from the config)\n  // should not update the active config\n  private _clone(object: any) {\n    const cloneConfig: LoggerConfig = new LoggerConfig();\n\n    Object.keys(object).forEach((key) => {\n      cloneConfig[key] = object[key];\n    });\n\n    return cloneConfig;\n  }\n}\n",
    "import {NgxLoggerLevel} from '../types/logger-level.enum';\n\nexport class NGXLoggerUtils {\n\n  static prepareMetaString(timestamp: string, logLevel: string, fileName: string, lineNumber: string) {\n    const fileDetails = fileName ? ` [${fileName}:${lineNumber}]` : '';\n\n    return `${timestamp} ${logLevel}${fileDetails}`;\n  }\n\n  static getColor(level: NgxLoggerLevel): 'blue' | 'teal' | 'gray' | 'red' | undefined {\n    switch (level) {\n      case NgxLoggerLevel.TRACE:\n        return 'blue';\n      case NgxLoggerLevel.DEBUG:\n        return 'teal';\n      case NgxLoggerLevel.INFO:\n      case NgxLoggerLevel.LOG:\n        return 'gray';\n      case NgxLoggerLevel.WARN:\n      case NgxLoggerLevel.ERROR:\n        return 'red';\n      case NgxLoggerLevel.OFF:\n      default:\n        return;\n    }\n  }\n\n\n\n  /**\n   *  This allows us to see who called the logger\n   *  @return {string}\n   *  @private\n   */\n  static getCallerDetails(): {lineNumber: string, fileName: string} {\n    const err = (new Error(''));\n\n    try {\n      // this should produce the line which NGX Logger was called\n      const callerLine = err.stack.split('\\n')[4].split('/');\n\n      // returns the file:lineNumber\n      const fileLineNumber = callerLine[callerLine.length - 1].replace(/[)]/g, '').split(':');\n\n      return {\n        fileName: fileLineNumber[0],\n        lineNumber: fileLineNumber[1]\n      }\n    } catch(e) {\n      return {\n        fileName: null,\n        lineNumber: null\n      }\n    }\n\n  }\n\n  static prepareMessage(message) {\n    try {\n       if (typeof message !== 'string' && !(message instanceof Error)) {\n        message = JSON.stringify(message, null, 2);\n      }\n    } catch (e) {\n      // additional = [message, ...additional];\n      message = 'The provided \"message\" value could not be parsed with JSON.stringify().';\n    }\n\n    return message;\n  }\n\n  static prepareAdditionalParameters(additional: any[]) {\n    if (additional === null || additional === undefined) {\n      return null;\n    }\n\n    return additional.map((next, idx) => {\n      try {\n        // We just want to make sure the JSON can be parsed, we do not want to actually change the type\n        if (typeof next === 'object') {\n          JSON.stringify(next)\n        }\n\n        return next;\n      } catch (e) {\n        return `The additional[${idx}] value could not be parsed using JSON.stringify().`\n      }\n    });\n  }\n\n}\n",
    "import {Inject, Injectable, PLATFORM_ID} from '@angular/core';\nimport {HttpErrorResponse} from '@angular/common/http';\nimport {isPlatformBrowser} from '@angular/common';\n\nimport {NGXLoggerHttpService} from './http.service';\nimport {NgxLoggerLevel} from './types/logger-level.enum';\nimport {LoggerConfig} from './logger.config';\nimport {NGXLoggerConfigEngine} from './config.engine';\nimport {NGXLoggerUtils} from './utils/logger.utils';\nimport {HttpMetaDataInterface} from './types/http-meta-data.interface';\n\nexport const Levels = [\n  'TRACE',\n  'DEBUG',\n  'INFO',\n  'LOG',\n  'WARN',\n  'ERROR',\n  'OFF'\n];\n\n\n@Injectable()\nexport class NGXLogger {\n  private readonly _isIE: boolean;\n  private readonly _logFunc: Function;\n  private configService: NGXLoggerConfigEngine;\n\n  constructor(private readonly httpService: NGXLoggerHttpService, loggerConfig: LoggerConfig,\n              @Inject(PLATFORM_ID) private readonly platformId) {\n    this._isIE = isPlatformBrowser(platformId) &&\n      !!(navigator.userAgent.indexOf('MSIE') !== -1 || navigator.userAgent.match(/Trident\\//) || navigator.userAgent.match(/Edge\\//));\n\n    // each instance of the logger should have their own config engine\n    this.configService = new NGXLoggerConfigEngine(loggerConfig);\n\n    this._logFunc = this._isIE ? this._logIE.bind(this) : this._logModern.bind(this);\n\n  }\n\n  public trace(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.TRACE, message, additional);\n  }\n\n  public debug(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.DEBUG, message, additional);\n  }\n\n  public info(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.INFO, message, additional);\n  }\n\n  public log(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.LOG, message, additional);\n  }\n\n  public warn(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.WARN, message, additional);\n  }\n\n  public error(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.ERROR, message, additional);\n  }\n\n  public updateConfig(config: LoggerConfig) {\n    this.configService.updateConfig(config);\n  }\n\n  public getConfigSnapshot(): LoggerConfig {\n    return this.configService.getConfig();\n  }\n\n  private _logIE(level: NgxLoggerLevel, metaString: string, message: string, additional: any[]): void {\n\n    // Coloring doesn't work in IE\n    // make sure additional isn't null or undefined so that ...additional doesn't error\n    additional = additional || [];\n\n    switch (level) {\n      case NgxLoggerLevel.WARN:\n        console.warn(`${metaString} `, message, ...additional);\n        break;\n      case NgxLoggerLevel.ERROR:\n        console.error(`${metaString} `, message, ...additional);\n        break;\n      case NgxLoggerLevel.INFO:\n        console.info(`${metaString} `, message, ...additional);\n        break;\n      default:\n        console.log(`${metaString} `, message, ...additional);\n    }\n  }\n\n  private _logModern(level: NgxLoggerLevel, metaString: string, message: string, additional: any[]): void {\n\n    const color = NGXLoggerUtils.getColor(level);\n\n    // make sure additional isn't null or undefined so that ...additional doesn't error\n    additional = additional || [];\n\n    switch (level) {\n      case NgxLoggerLevel.WARN:\n        console.warn(`%c${metaString}`, `color:${color}`, message, ...additional);\n        break;\n      case NgxLoggerLevel.ERROR:\n        console.error(`%c${metaString}`, `color:${color}`, message, ...additional);\n        break;\n      case NgxLoggerLevel.INFO:\n        console.info(`%c${metaString}`, `color:${color}`, message, ...additional);\n        break;\n      case NgxLoggerLevel.TRACE:\n        console.trace(`%c${metaString}`, `color:${color}`, message, ...additional);\n        break;\n      case NgxLoggerLevel.DEBUG:\n        console.debug(`%c${metaString}`, `color:${color}`, message, ...additional);\n        break;\n      default:\n        console.log(`%c${metaString}`, `color:${color}`, message, ...additional);\n    }\n  }\n\n  private _log(level: NgxLoggerLevel, message, additional: any[] = [], logOnServer: boolean = true): void {\n    const config = this.configService.getConfig();\n    const isLog2Server = logOnServer && config.serverLoggingUrl && level >= config.serverLogLevel;\n    const isLog2Console = !(level < config.level);\n    if (!(message && (isLog2Server || isLog2Console))) {\n      return;\n    }\n\n    const logLevelString = Levels[level];\n\n    message = NGXLoggerUtils.prepareMessage(message);\n\n    // only use validated parameters for HTTP requests\n    const validatedAdditionalParameters = NGXLoggerUtils.prepareAdditionalParameters(additional);\n\n    const timestamp = new Date().toISOString();\n\n    const callerDetails = NGXLoggerUtils.getCallerDetails();\n\n    if (isLog2Server) {\n\n      const metaData: HttpMetaDataInterface = {\n        level: level,\n        timestamp: timestamp,\n        fileName: callerDetails.fileName,\n        lineNumber: callerDetails.lineNumber,\n      };\n\n      // make sure the stack gets sent to the server\n      message = message instanceof Error ? message.stack : message;\n\n      // Allow logging on server even if client log level is off\n      this.httpService.logOnServer(config.serverLoggingUrl, message, validatedAdditionalParameters, metaData).subscribe((res: any) => {\n          // I don't think we should do anything on success\n        },\n        (error: HttpErrorResponse) => {\n          this._log(NgxLoggerLevel.ERROR, `FAILED TO LOG ON SERVER: ${message}`, [error], false);\n        }\n      );\n    }\n\n\n    // if no message or the log level is less than the environ\n    if (isLog2Console) {\n\n      const metaString = NGXLoggerUtils.prepareMetaString(timestamp, logLevelString, callerDetails.fileName, callerDetails.lineNumber);\n\n      return this._logFunc(level, metaString, message, additional);\n    }\n\n  }\n}\n",
    "import {Inject, Injectable, PLATFORM_ID} from '@angular/core';\n\nimport {LoggerConfig} from './logger.config';\nimport {NGXLoggerHttpService} from './http.service';\nimport {NGXLogger} from './logger.service';\n\n\n/**\n * CustomNGXLoggerService is designed to allow users to get a new instance of a logger\n */\n@Injectable()\nexport class CustomNGXLoggerService {\n\n  constructor(private readonly httpService: NGXLoggerHttpService,\n              @Inject(PLATFORM_ID) private readonly platformId) {\n  }\n\n  create(config: LoggerConfig, httpService?: NGXLoggerHttpService): NGXLogger {\n    // you can inject your own httpService or use the default,\n    return new NGXLogger(httpService || this.httpService, config, this.platformId);\n  }\n}\n\n\n",
    "import {NgxLoggerLevel} from './logger-level.enum';\n\nexport class HttpMetaDataInterface {\n  level: NgxLoggerLevel;\n  timestamp: string;\n  fileName: string;\n  lineNumber: string;\n}\n",
    "import {CommonModule} from '@angular/common';\nimport {HttpClientModule} from '@angular/common/http';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {NGXLogger} from './logger.service';\nimport {LoggerConfig} from './logger.config';\nimport {CustomNGXLoggerService} from './custom-logger.service';\nimport {NGXLoggerHttpService} from './http.service';\n\nexport * from './logger.service';\n\nexport * from './logger.config';\n\nexport * from './custom-logger.service';\n\nexport * from './http.service';\n\nexport * from './utils/logger.utils';\nexport * from './types/logger-level.enum';\nexport * from './types/http-meta-data.interface';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  providers: [\n    NGXLogger,\n    NGXLoggerHttpService,\n    CustomNGXLoggerService\n  ]\n})\nexport class LoggerModule {\n  static forRoot(config: LoggerConfig | null | undefined): ModuleWithProviders {\n    return {\n      ngModule: LoggerModule,\n      providers: [\n        {provide: LoggerConfig, useValue: config || {}},\n        NGXLogger,\n        NGXLoggerHttpService,\n        CustomNGXLoggerService\n      ]\n    };\n  }\n  static forChild(): ModuleWithProviders {\n    return {\n      ngModule: LoggerModule,\n      providers: [\n        NGXLogger,\n        NGXLoggerHttpService,\n        CustomNGXLoggerService\n      ]\n    };\n  }\n}\n",
    "\nexport class NGXLoggerMock {\n\n  constructor() {\n  }\n\n  trace(message: any, ...additional: any[]) {\n  }\n\n  debug(message: any, ...additional: any[]) {\n  }\n\n  info(message: any, ...additional: any[]) {\n  }\n\n  log(message: any, ...additional: any[]) {\n  }\n\n  warn(message: any, ...additional: any[]) {\n  }\n\n  error(message: any, ...additional: any[]) {\n  }\n\n  updateConfig(config: any) {\n\n  }\n}\n",
    "import {NGXLoggerMock} from './logger.service.mock';\n\n/**\n * CustomNGXLoggerServiceMock is a mock for CustomNGXLoggerService\n */\nexport class CustomNGXLoggerServiceMock {\n\n  constructor() {\n  }\n\n  create(): NGXLoggerMock {\n    // you can inject your own httpService or use the default,\n    return new NGXLoggerMock();\n  }\n}\n\n\n",
    "import {Observable, of} from 'rxjs';\n\nexport class NGXLoggerHttpServiceMock {\n  constructor() {\n\n  }\n\n  logOnServer(url: string, message: string, additional: any[], timestamp: string, logLevel: string): Observable<any> {\n    return of({})\n  }\n}\n"
  ],
  "names": [
    "__read",
    "o",
    "n",
    "m",
    "Symbol",
    "iterator",
    "r",
    "e",
    "i",
    "call",
    "ar",
    "next",
    "done",
    "push",
    "value",
    "error",
    "__spread",
    "arguments",
    "length",
    "concat",
    "NGXLoggerHttpService",
    "http",
    "this",
    "prototype",
    "logOnServer",
    "url",
    "message",
    "additional",
    "metaData",
    "body",
    "level",
    "timestamp",
    "fileName",
    "lineNumber",
    "options",
    "headers",
    "HttpHeaders",
    "set",
    "post",
    "type",
    "Injectable",
    "HttpClient",
    "LoggerConfig",
    "NGXLoggerConfigEngine",
    "config",
    "_config",
    "updateConfig",
    "_clone",
    "getConfig",
    "object",
    "cloneConfig",
    "Object",
    "keys",
    "forEach",
    "key",
    "NGXLoggerUtils",
    "prepareMetaString",
    "logLevel",
    "getColor",
    "NgxLoggerLevel",
    "TRACE",
    "DEBUG",
    "INFO",
    "LOG",
    "WARN",
    "ERROR",
    "OFF",
    "getCallerDetails",
    "err",
    "Error",
    "callerLine",
    "stack",
    "split",
    "fileLineNumber",
    "replace",
    "prepareMessage",
    "JSON",
    "stringify",
    "prepareAdditionalParameters",
    "undefined",
    "map",
    "idx",
    "Levels",
    "NGXLogger",
    "httpService",
    "loggerConfig",
    "platformId",
    "_isIE",
    "isPlatformBrowser",
    "navigator",
    "userAgent",
    "indexOf",
    "match",
    "configService",
    "_logFunc",
    "_logIE",
    "bind",
    "_logModern",
    "trace",
    "_i",
    "_log",
    "debug",
    "info",
    "log",
    "warn",
    "getConfigSnapshot",
    "metaString",
    "console",
    "apply",
    "color",
    "_this",
    "isLog2Server",
    "serverLoggingUrl",
    "serverLogLevel",
    "isLog2Console",
    "logLevelString",
    "validatedAdditionalParameters",
    "Date",
    "toISOString",
    "callerDetails",
    "subscribe",
    "res",
    "decorators",
    "Inject",
    "args",
    "PLATFORM_ID",
    "CustomNGXLoggerService",
    "create",
    "HttpMetaDataInterface",
    "LoggerModule",
    "forRoot",
    "ngModule",
    "providers",
    "provide",
    "useValue",
    "forChild",
    "NgModule",
    "imports",
    "CommonModule",
    "HttpClientModule",
    "NGXLoggerMock",
    "CustomNGXLoggerServiceMock",
    "NGXLoggerHttpServiceMock",
    "of"
  ],
  "mappings": "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"
}
